# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                              @controllers.ApplicationController.index
GET         /visualize/datacube                            @controllers.DataCubeController.visualize
GET         /visualize/map                                 @controllers.MapController.visualize
GET         /pipelines                                     @controllers.PipelineController.index
GET         /components                                    @controllers.ComponentTemplateController.index

POST        /api/v1/components/add/ttl                     @controllers.api.LdvmApiController.ttl
GET         /api/v1/compatibility/check/:pipelineId        @controllers.api.CompatibilityApiController.check(pipelineId: Long)
GET         /api/v1/pipelines/evaluate/:pipelineId         @controllers.api.PipelineApiController.evaluate(pipelineId: Long)
GET         /api/v1/pipelines                              @controllers.api.PipelineApiController.list(skip: Int ?= 0, pageSize: Int ?= 50, discoveryId: Option[Long] ?= None)
GET         /api/v1/pipelines/discover                     @controllers.api.PipelineApiController.discover()
#GET         /api/v1/pipelines/discovery/:id                @controllers.api.PipelineApiController.discoveryState(id: Long)
GET         /api/v1/pipelines/visualization/:id            @controllers.api.PipelineApiController.visualizationById(id: Long)
GET         /api/v1/pipelines/:id                          @controllers.api.PipelineApiController.findById(id: Long)


#POST        /api/map/polygon-entities/:id                   @controllers.api.MapApiController.polygonEntities(id: Long)
#GET         /api/map/polygon-entities-properties/:id        @controllers.api.MapApiController.polygonEntitiesProperties(id: Long)

#GET         /api/datacube/datasets/:id                      @controllers.api.DataCubeApiController.datasets(id: Long)
#GET         /api/datacube/datastructures/:id                @controllers.api.DataCubeApiController.dataStructures(id: Long)
#GET         /api/datacube/datastructure-components          @controllers.api.DataCubeApiController.dataStructureComponents(id: Long, uri: String)
#POST        /api/datacube/values/:id                        @controllers.api.DataCubeApiController.values(id: Long)
#POST        /api/datacube/slices/:id           co             @controllers.api.DataCubeApiController.sliceCube(id: Long)

#GET         /api/compatibility/check/:id                    @controllers.api.VisualizationApiController.checkCompatibility(id: Long)
#GET         /api/compatibility/:id                          @controllers.api.VisualizationApiController.getCompatibilityForVisualization(id: Long)
#GET         /api/visualization/list                         @controllers.api.VisualizationApiController.list(skip: Int, take: Int)
#GET         /api/visualization/queries/:id                  @controllers.api.VisualizationApiController.queries(id: Long, permalinkToken: String)
#GET         /api/visualization/cached/:id/:token            @controllers.api.VisualizationApiController.getCachedResult(id: Long, token: String)
#GET         /api/visualization/add-datasource               @controllers.api.VisualizationApiController.addDataSource(endpointUri: String, graphUri: Option[String])
#GET         /api/visualization/add                          @controllers.api.VisualizationApiController.addVisualization(dataDataSource: Long, dsdDataSource: Long, name: Option[String])
#GET         /api/visualization/payola/:evaluationId         @controllers.api.VisualizationApiController.addPayola(evaluationId: String)
#GET         /api/visualization/:id                          @controllers.api.VisualizationApiController.get(id: Long)


#GET         /api/visualizer/list                            @controllers.api.VisualizerApiController.list(skip: Int, take: Int)
#GET         /api/visualizer/add                             @controllers.api.VisualizerApiController.add(name: String, signature: String, url: String, description: Option[String], title: Option[String])

# React Playground
GET         /react$any<.*>                                 @controllers.reactplayground.ApplicationController.index(any)


# Map static resources from the /public folder to the /assets URL path
GET         /vassets/*file                                 controllers.Assets.versioned(path="/public", file: Asset)
GET         /assets/*file                                  controllers.Assets.at(path="/public", file)
GET         /webjars/*file                                 controllers.WebJarAssets.at(file)
